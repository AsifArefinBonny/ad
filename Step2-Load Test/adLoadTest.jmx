<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">30</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">/Users/asifarefinbonny/Desktop/apache-jmeter-5.6.3/bin/chromedriver</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

// Initialize WebDriver
WDS.browser.get(&quot;https://staging.a-d.com.au/new-apartments-developments/nsw/castle-hill-2154/grand-reve&quot;);

// Function to generate a random name
String generateRandomName() {
    String[] firstNames = {&quot;John&quot;, &quot;Jane&quot;, &quot;Mike&quot;, &quot;Emma&quot;, &quot;Tom&quot;, &quot;Sophia&quot;, &quot;Bob&quot;, &quot;Olivia&quot;};
    String[] lastNames = {&quot;Smith&quot;, &quot;Doe&quot;, &quot;Johnson&quot;, &quot;Brown&quot;, &quot;Williams&quot;, &quot;Jones&quot;, &quot;Miller&quot;, &quot;Davis&quot;};
    return firstNames[Math.floor(Math.random() * firstNames.length)] + &quot; &quot; + lastNames[Math.floor(Math.random() * lastNames.length)];
}

// Function to generate a random Australian phone number
String generateRandomAustralianPhoneNumber() {
    return &quot;4&quot; + new Random().ints(0, 10).limit(8).collect(StringBuilder::new, StringBuilder::append, StringBuilder::append).toString();
}

// Function to generate a random Australian postcode
String generateRandomAustralianPostcode() {
    String[] postcodes = {&quot;2000&quot;, &quot;2001&quot;, &quot;2002&quot;, &quot;2003&quot;, &quot;2004&quot;, &quot;2005&quot;, &quot;2006&quot;, &quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;,
            &quot;2500&quot;, &quot;2501&quot;, &quot;2502&quot;, &quot;2503&quot;, &quot;2504&quot;, &quot;2505&quot;, &quot;2506&quot;, &quot;2507&quot;, &quot;2508&quot;, &quot;2509&quot;,
            &quot;3000&quot;, &quot;3001&quot;, &quot;3002&quot;, &quot;3003&quot;, &quot;3004&quot;, &quot;3005&quot;, &quot;3006&quot;, &quot;3007&quot;, &quot;3008&quot;, &quot;3009&quot;,
            &quot;4000&quot;, &quot;4001&quot;, &quot;4002&quot;, &quot;4003&quot;, &quot;4004&quot;, &quot;4005&quot;, &quot;4006&quot;, &quot;4007&quot;, &quot;4008&quot;, &quot;4009&quot;,
            &quot;6000&quot;, &quot;6001&quot;, &quot;6002&quot;, &quot;6003&quot;, &quot;6004&quot;, &quot;6005&quot;, &quot;6006&quot;, &quot;6007&quot;, &quot;6008&quot;, &quot;6009&quot;,
            &quot;7000&quot;, &quot;7001&quot;, &quot;7002&quot;, &quot;7003&quot;, &quot;7004&quot;, &quot;7005&quot;, &quot;7006&quot;, &quot;7007&quot;, &quot;7008&quot;, &quot;7009&quot;,
            &quot;8000&quot;, &quot;8001&quot;, &quot;8002&quot;, &quot;8003&quot;, &quot;8004&quot;, &quot;8005&quot;, &quot;8006&quot;, &quot;8007&quot;, &quot;8008&quot;, &quot;8009&quot;};
    return postcodes[new Random().nextInt(postcodes.length)];
}

// Fill and submit the form
boolean formSubmitted = false;

while (!formSubmitted) {
    try {
        WebElement enquireButton = WDS.browser.findElement(By.cssSelector(&quot;button.fullWidth.fullHeight&quot;));
        enquireButton.click();

        String randomName = generateRandomName();
        WebElement nameInput = WDS.browser.findElement(By.cssSelector(&quot;input[formcontrolname=&apos;name&apos;]&quot;));
        nameInput.sendKeys(randomName);

        WebElement emailInput = WDS.browser.findElement(By.cssSelector(&quot;input[formcontrolname=&apos;email&apos;]&quot;));
        emailInput.sendKeys(randomName.split(&quot; &quot;)[0].toLowerCase() + &quot;@test.com&quot;);

        WebElement phoneInput = WDS.browser.findElement(By.id(&quot;phone&quot;));
        phoneInput.sendKeys(generateRandomAustralianPhoneNumber());

        WebElement postcodeInput = WDS.browser.findElement(By.cssSelector(&quot;input[formcontrolname=&apos;postCode&apos;]&quot;));
        postcodeInput.sendKeys(generateRandomAustralianPostcode());

        List&lt;WebElement&gt; selectFields = WDS.browser.findElements(By.cssSelector(&quot;select[formcontrolname]&quot;));
        for (WebElement selectField : selectFields) {
            List&lt;WebElement&gt; options = selectField.findElements(By.tagName(&quot;option&quot;));
            int randomIndex = new Random().nextInt(options.size() - 1) + 1;
            new Select(selectField).selectByIndex(randomIndex);
        }

        List&lt;WebElement&gt; checkboxes = WDS.browser.findElements(By.cssSelector(&quot;input[formcontrolname][type=&apos;checkbox&apos;]&quot;));
        for (WebElement checkbox : checkboxes) {
            checkbox.click();
        }

        WebElement addMessageLabel = WDS.browser.findElement(By.cssSelector(&quot;label.add-message-toggle&quot;));
        addMessageLabel.click();

        WebElement messageTextarea = WDS.browser.findElement(By.cssSelector(&quot;textarea[formcontrolname=&apos;message&apos;]&quot;));
        messageTextarea.sendKeys(randomName.split(&quot; &quot;)[0] + &quot; functionality &quot; + iterationCount);

        WebElement submitButton = WDS.browser.findElement(By.cssSelector(&quot;button.enquiry-submit&quot;));
        submitButton.click();
        formSubmitted = true;

        WebElement closeButton = WDS.browser.findElement(By.cssSelector(&quot;img[alt=&apos;Close&apos;]&quot;));
        closeButton.click();

        formSubmitted = false;
    } catch (Exception e) {
        WDS.log.info(&quot;An error occurred: &quot; + e.getMessage());
        break;
    }
}

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
